Asteroid[] asteroids;

int level = 1; // the difficulty level
int arrayPos = 0; //track what object in the array the code is up to, to allow the asteroid to be modified
int asteroidCount = 10*level; 


void setup(){
  size(800,800);
  //initialise pvtecotrs 
  //random astroid initial positions and directions;
  //initialise shapes if needed

  asteroids = new Asteroid[asteroidCount]; // note: reduce array size if an asteroid is destroyed
  
  int openArrayPos = 0;

  for(int i = 0; i < asteroids.length; i++) {
    if(asteroids[i] == null)
    {
        openArrayPos = i;
        break;
    }
   }

  if (openArrayPos <= 0) {
    int index = 0;
    for (int i = 0; i < asteroidCount; i++) {
        int xDirection;
        int yDirection;
       
       // set a random direction for each asteroid generated
        if(random (100) > 50){
           xDirection = 1; 
        }
        else {
          xDirection = -1;
        }
        
        if(random(100) > 50){
           yDirection = 1;
        }
        else {
          yDirection = -1;
        }
        
        asteroids[index++] = new Asteroid(random(75, 725), random(75, 725), random(3, 5), xDirection, yDirection); //x axis, y axis, speed, xdirection, ydirection
    }
  }
}

void createReplacementAsteroid (int indexTemp) {
    int index = indexTemp;
    for (int i = 0; i < asteroidCount; i++) {
        int xDirection;
        int yDirection;
       
       // set a random direction for each asteroid generated
        if(random (100) > 50){
           xDirection = 1; 
        }
        else {
          xDirection = -1;
        }
        
        if(random(100) > 50){
           yDirection = 1;
        }
        else {
          yDirection = -1;
        }
        
        asteroids[index] = new Asteroid(1, random(75, 725), random(3, 5), xDirection, yDirection); //x axis, y axis, speed, xdirection, ydirection - set x and y to 0
    }
}

void drawAstroids(){
  //check to see if astroid is not already destroyed
  //otherwise draw at location 
  //initial direction and location should be randomised
  //also make sure the astroid has not moved outside of the window
    
}

void draw(){
  background(0);
  
  for (Asteroid asteroids : asteroids) {
    
    arrayPos = arrayPos++;
    
    asteroids.update();
    asteroids.display();
  }
}

//void drawMediumAsteroid() {
//  // will need to add the start position to these values once that is known
//  stroke(153);
//  noFill();
//  beginShape();
//  vertex(length1/2, 0);//2
//  vertex(inner1/2, 5);//3
//  vertex(length2/2, 0);//4
//  vertex(50, height1/2);//6
//  vertex(45, inner2/2);//7
//  vertex(50, height2/2);//8
//  vertex(length3/2, 25);//10
//  vertex(inner3/2, 20);//11
//  vertex(length4/2, 25);//12
//  vertex(0, height3/2);//14
//  vertex(5, inner4/2);//15
//  vertex(0, height4/2);//16
//  vertex(length1/2, 0);
//  endShape();
//}

//void drawSmallAsteroid() {
//  // will need to add the start position to these values once that is known
//  stroke(153);
//  noFill();
//  beginShape();
//  vertex(length1/4, 0);//2
//  vertex(inner1/4, 2.5);//3
//  vertex(length2/4, 0);//4
//  vertex(25, height1/4);//6
//  vertex(22.5, inner2/4);//7
//  vertex(25, height2/4);//8
//  vertex(length3/4, 12.5);//10
//  vertex(inner3/4, 10);//11
//  vertex(length4/4, 12.5);//12
//  vertex(0, height3/4);//14
//  vertex(2.5, inner4/4);//15
//  vertex(0, height4/4);//16
//  vertex(length1/4, 0);
//  endShape();
//}

void drawLargeAsteroid(int size, float x, float y, float length1, float length2, float length3, float length4, float height1, float height2, float height3, float height4, float inner1, float inner2, float inner3, float inner4) {
  if (size == 1) { // small asteroid
  stroke(153);
  noFill();
  beginShape();
  vertex((length1+x)/4, (0+y)/4);
  vertex((inner1+x)/4, (10+y)/4);
  vertex((length2+x)/4, (0+y)/4);
  vertex((100+x)/4, (height1+y)/4);
  vertex((90+x)/4, (inner2+y)/4);
  vertex((100+x)/4, (height2+y)/4);
  vertex((length3+x)/4, (50+y)/4);
  vertex((inner3+x)/4, (40+y)/4);
  vertex((length4+x)/4, (50+y)/4);
  vertex((0+x)/4, (height3+y)/4);
  vertex((10+x)/4, (inner4+y)/4);
  vertex((0+x)/4, (height4+y)/4);
  vertex((length1+x)/4, (0+y)/4);
  endShape();
  }
  
  if (size == 2) { // medium asteroid
  stroke(153);
  noFill();
  beginShape();
  vertex((length1+x)/2, (0+y)/2);
  vertex((inner1+x)/2, (10+y)/2);
  vertex((length2+x)/2, (0+y)/2);
  vertex((100+x)/2, (height1+y)/2);
  vertex((90+x)/2, (inner2+y)/2);
  vertex((100+x)/2, (height2+y)/2);
  vertex((length3+x)/2, (50+y)/2);
  vertex((inner3+x)/2, (40+y)/2);
  vertex((length4+x)/2, (50+y)/2);
  vertex((0+x)/2, (height3+y)/2);
  vertex((10+x)/2, (inner4+y)/2);
  vertex((0+x)/2, (height4+y)/2);
  vertex((length1+x)/2, (0+y)/2);
  endShape();
  }
  
  if (size == 3) { // large asteroid
  stroke(153);
  noFill();
  beginShape();
  vertex(length1+x, 0+y);
  vertex(inner1+x, 10+y);
  vertex(length2+x, 0+y);
  vertex(100+x, height1+y);
  vertex(90+x, inner2+y);
  vertex(100+x, height2+y);
  vertex(length3+x, 50+y);
  vertex(inner3+x, 40+y);
  vertex(length4+x, 50+y);
  vertex(0+x, height3+y);
  vertex(10+x, inner4+y);
  vertex(0+x, height4+y);
  vertex(length1+x, 0+y);
  endShape();
  }
}

class Asteroid {
  //variables to store the numbers required to generate the asteroid shape
  float length1 = random (5 , 45);
  float length2 = random (50 , 95);
  float length3 = random (50 , 95);
  float length4 = random (5 , 45);
  float height1 = random (5 , 20);
  float height2 = random (30 , 45);
  float height3 = random (30 , 45);
  float height4 = random (5 , 20);
  float inner1 = random (30, 50);
  float inner2 = random (15, 20);
  float inner3 = random (30, 50);
  float inner4 = random (15, 20);
  int size = round(random(3));
  
  //variables to store the position and movement
  float x, y;
  int xDirection;
  int yDirection;
  float speed; 
  
  // Contructor
  Asteroid(float xTemp, float yTemp, float speedTemp, int xDirectionTemp, int yDirectionTemp) {
    x = xTemp;
    y = yTemp;
    speed = speedTemp;
    xDirection = xDirectionTemp;
    yDirection = yDirectionTemp;
  }
  
 void update() {
    x = x + (speed * xDirection);
    y = y + (speed * yDirection);
    
    if ((x <= -50) || (x > 800) || (y <= -50) || (y > 800)) {
        asteroids[arrayPos] = null;
        createReplacementAsteroid (arrayPos);
    }

  }
  
  // Custom method for drawing the object
  void display() {
    fill(255);
    drawLargeAsteroid(size, x, y, length1, length2, length3, length4, height1, height2, height3, height4, inner1, inner2, inner3, inner4);
  }
}
